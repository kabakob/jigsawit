<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>เกมจิ๊กซอว์อุปกรณ์คอมพิวเตอร์</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: #f0f0f0;
            margin: 0;
            padding: 20px;
        }
        .container {
            background: white;
            padding: 20px 40px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 900px;
            width: 100%;
        }
        .section {
            display: none;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }
        #lobby {
            display: flex;
        }
        .player-list {
            list-style: none;
            padding: 0;
            margin: 10px 0;
            text-align: left;
            width: 100%;
            max-width: 300px;
        }
        .player-list li {
            background: #e9e9e9;
            padding: 8px 12px;
            margin-bottom: 5px;
            border-radius: 5px;
        }
        #game-layout {
            display: flex;
            gap: 20px;
            align-items: flex-start;
            flex-wrap: wrap;
            justify-content: center;
        }
        #puzzle-grid, #puzzle-pieces-container {
            display: grid;
            border: 2px solid #333;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            width: 400px;
            height: 400px;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
        }
        .drop-zone {
            width: 100%;
            height: 100%;
            border: 1px dashed #ccc;
            box-sizing: border-box;
            background-color: #f9f9f9;
        }
        .drop-zone.hover {
            border-color: #007bff;
            background-color: #e6f7ff;
        }
        .puzzle-piece {
            background-size: 400px 400px;
            box-sizing: border-box;
            cursor: grab;
            transition: transform 0.1s;
        }
        .puzzle-piece:hover {
            z-index: 10;
        }
        #game-info {
            font-size: 1.2em;
            margin-bottom: 15px;
        }
        #game-info h3 {
            margin: 5px 0;
        }
        #game-info #timer {
            font-weight: bold;
            color: #d9534f;
        }
        #scoreboard h2 {
            color: #28a745;
        }
        .score-table-container {
            width: 100%;
            max-width: 600px;
            margin-top: 20px;
        }
        .score-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
            text-align: left;
        }
        .score-table th, .score-table td {
            padding: 10px;
            border: 1px solid #ccc;
        }
        .score-table th {
            background-color: #333;
            color: white;
            text-align: center;
        }
        .score-table td {
            text-align: center;
        }
        .score-table tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .score-table tr.top-3 {
            font-weight: bold;
            color: #d9534f;
        }
        .score-table td.rank {
            font-size: 1.1em;
        }
        .score-table-title {
            margin-top: 30px;
            margin-bottom: 10px;
        }
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        button {
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            color: white;
            background-color: #007bff;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #0056b3;
        }
        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        .btn-green {
            background-color: #28a745;
        }
        .btn-green:hover {
            background-color: #218838;
        }
        .btn-red {
            background-color: #d9534f;
        }
        .btn-red:hover {
            background-color: #c9302c;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>เกมจิ๊กซอว์อุปกรณ์คอมพิวเตอร์</h1>

        <div id="lobby" class="section">
            <h2>ลงทะเบียนผู้เล่นและรอการแข่งขัน</h2>
            <div style="display: flex; gap: 10px;">
                <input type="text" id="playerNameInput" placeholder="กรอกชื่อของคุณ" required>
                <button onclick="startRace()">เริ่มเล่น</button>
            </div>

        </div>

        <div id="game" class="section">
            <h2 id="gameStatus">กำลังรอผู้เล่นคนอื่น...</h2>
            <div id="game-info">
                <h3>เวลา: <span id="timer">0.00</span> วินาที</h3>
                <p>เป้าหมาย: ลากชิ้นส่วนไปวางในช่องว่างให้เป็นภาพที่สมบูรณ์</p>
            </div>
            
            <div id="game-layout">
                <div>
                    <h4>ภาพตัวอย่าง</h4>
                    <img id="sample-image" src="" alt="ภาพตัวอย่าง" style="width: 400px; height: 400px; border: 2px solid #333;">
                </div>
                <div>
                    <h4>ตารางจิ๊กซอว์</h4>
                    <div id="puzzle-grid"></div>
                </div>
                <div>
                    <h4>ชิ้นส่วน</h4>
                    <div id="puzzle-pieces-container"></div>
                </div>
            </div>
            <button id="submitBtn" onclick="submitPuzzle()" disabled>ส่งผล</button>
        </div>

        <div id="scoreboard" class="section">
            <h2>ผลการแข่งขัน</h2>
            <h3 id="playerScoreTime"></h3>
            <div class="button-group">
                <button onclick="resetGame()">เล่นใหม่อีกครั้ง</button>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const lobbyEl = document.getElementById('lobby');
        const gameEl = document.getElementById('game');
        const scoreboardEl = document.getElementById('scoreboard');
        const playerNameInput = document.getElementById('playerNameInput');
        const playerListEl = document.getElementById('playerList');
        const startRaceBtn = document.getElementById('startRaceBtn');
        const playerCountStatusEl = document.getElementById('playerCountStatus');
        const sampleImageEl = document.getElementById('sample-image');
        const puzzleGridEl = document.getElementById('puzzle-grid');
        const puzzlePiecesContainerEl = document.getElementById('puzzle-pieces-container');
        const timerEl = document.getElementById('timer');
        const gameStatusEl = document.getElementById('gameStatus');
        const submitBtn = document.getElementById('submitBtn');
        const playerScoreTimeEl = document.getElementById('playerScoreTime');

        // Game State Variables
        const images = [
            './images/A1.jpg',
            './images/A2.jpg',
            './images/A3.jpg',
            './images/A4.jpg',
            './images/A5.jpg',
            './images/A6.jpg',
            './images/A7.jpg',
            './images/A8.jpg',
            './images/A9.jpg',
            './images/A10.jpg',
            './images/A11.jpg',
            './images/A12.jpg'
        ];
        
        let players = [];
        let selectedImage = '';
        let timerInterval;
        let startTime;
        let currentPlayerName = '';

        // Drag & Drop variables
        let draggedElement = null;

        document.addEventListener('DOMContentLoaded', () => {
            lobbyEl.style.display = 'flex';
        });

        // --- Step 1: Lobby & Joining ---
        function joinGame() {
            const playerName = playerNameInput.value.trim();
            if (playerName === '') {
                alert('กรุณากรอกชื่อผู้เล่น!');
                return;
            }
            
            currentPlayerName = playerName;
            players.push({ name: playerName });
            updateLobbyUI();
            playerNameInput.value = '';
            
            playerNameInput.disabled = true;
            document.querySelector('#lobby button').disabled = true;
        }

        function updateLobbyUI() {
            playerListEl.innerHTML = '';
            players.forEach(p => {
                const li = document.createElement('li');
                li.textContent = p.name;
                playerListEl.appendChild(li);
            });

            playerCountStatusEl.textContent = `ผู้เข้าร่วม: ${players.length} คน`;
            startRaceBtn.disabled = players.length < 1;
        }

        // --- Step 2: Game Start & Initialization ---
        function startRace() {
            if (images.length === 0) {
                alert('ไม่พบภาพในโฟลเดอร์ images!');
                return;
            }
            
            lobbyEl.style.display = 'none';
            gameEl.style.display = 'flex';
            submitBtn.disabled = false;
            
            selectedImage = images[Math.floor(Math.random() * images.length)];
            sampleImageEl.src = selectedImage;
            
            const puzzleSize = 3;
            createPuzzleGrid(puzzleSize);
            createDraggablePieces(puzzleSize);
            
            let countdown = 3;
            gameStatusEl.textContent = `เกมจะเริ่มใน ${countdown}...`;
            const countdownInterval = setInterval(() => {
                countdown--;
                if (countdown > 0) {
                    gameStatusEl.textContent = `เกมจะเริ่มใน ${countdown}...`;
                } else {
                    clearInterval(countdownInterval);
                    gameStatusEl.textContent = `กำลังแข่งขัน!`;
                    startGameTimer();
                }
            }, 1000);
        }

        function createPuzzleGrid(size) {
            puzzleGridEl.innerHTML = '';
            const totalCells = size * size;
            for (let i = 0; i < totalCells; i++) {
                const cell = document.createElement('div');
                cell.classList.add('drop-zone');
                cell.dataset.correctIndex = i;
                cell.addEventListener('dragover', handleDragOver);
                cell.addEventListener('drop', handleDrop);
                cell.addEventListener('dragenter', handleDragEnter);
                cell.addEventListener('dragleave', handleDragLeave);
                puzzleGridEl.appendChild(cell);
            }
        }
        
        function createDraggablePieces(size) {
            puzzlePiecesContainerEl.innerHTML = '';
            const totalPieces = size * size;
            const tileSize = 400 / size;
            
            const pieces = [];
            for (let i = 0; i < totalPieces; i++) {
                const piece = document.createElement('div');
                piece.classList.add('puzzle-piece');
                piece.draggable = true;
                piece.dataset.correctIndex = i;
                piece.style.width = `${tileSize}px`;
                piece.style.height = `${tileSize}px`;
                piece.style.backgroundPosition = `-${(i % size) * tileSize}px -${Math.floor(i / size) * tileSize}px`;
                piece.style.backgroundImage = `url(${selectedImage})`;
                
                piece.addEventListener('dragstart', handleDragStart);
                pieces.push(piece);
            }
            
            shuffle(pieces);
            pieces.forEach(piece => {
                const dropZone = document.createElement('div');
                dropZone.classList.add('drop-zone');
                dropZone.addEventListener('dragover', handleDragOver);
                dropZone.addEventListener('drop', handleDrop);
                dropZone.addEventListener('dragenter', handleDragEnter);
                dropZone.addEventListener('dragleave', handleDragLeave);
                dropZone.appendChild(piece);
                puzzlePiecesContainerEl.appendChild(dropZone);
            });
        }

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }
        
        // --- Drag & Drop Handlers ---
        function handleDragStart(event) {
            draggedElement = event.target;
            event.dataTransfer.setData('text/plain', draggedElement.dataset.correctIndex);
        }

        function handleDragOver(event) {
            event.preventDefault();
        }
        
        function handleDragEnter(event) {
            event.preventDefault();
            event.target.classList.add('hover');
        }

        function handleDragLeave(event) {
            event.target.classList.remove('hover');
        }

        function handleDrop(event) {
            event.preventDefault();
            const dropZone = event.target.closest('.drop-zone');
            
            if (dropZone && dropZone.children.length === 0) {
                dropZone.appendChild(draggedElement);
            } else if (dropZone && dropZone.children.length > 0) {
                const targetPiece = dropZone.children[0];
                const targetParent = targetPiece.parentNode;
                const draggedParent = draggedElement.parentNode;

                if (targetParent && draggedParent) {
                    draggedParent.appendChild(targetPiece);
                    targetParent.appendChild(draggedElement);
                }
            }
        }

        // --- Step 3: Timer & Submission ---
        function startGameTimer() {
            startTime = new Date().getTime();
            timerInterval = setInterval(updateTimer, 100);
        }

        function updateTimer() {
            const elapsed = (new Date().getTime() - startTime) / 1000;
            timerEl.textContent = elapsed.toFixed(2);
        }

        function submitPuzzle() {
            if (!isSolved()) {
                alert('จิ๊กซอว์ยังไม่สมบูรณ์! ลองใหม่อีกครั้ง');
                return;
            }

            clearInterval(timerInterval);
            const playerTime = (new Date().getTime() - startTime) / 1000;
            
            gameStatusEl.textContent = 'คุณทำเสร็จแล้ว!';
            submitBtn.disabled = true;
            
            showScoreboard(playerTime);
        }

        function isSolved() {
            const dropZones = Array.from(puzzleGridEl.children);
            if (dropZones.some(zone => zone.children.length === 0)) {
                return false;
            }

            for (let i = 0; i < dropZones.length; i++) {
                const piece = dropZones[i].querySelector('.puzzle-piece');
                if (parseInt(piece.dataset.correctIndex) !== parseInt(dropZones[i].dataset.correctIndex)) {
                    return false;
                }
            }
            return true;
        }

        // --- Step 4: Scoreboard & Reset ---
        function showScoreboard(playerTime) {
            gameEl.style.display = 'none';
            scoreboardEl.style.display = 'flex';
            
            if (playerTime) {
                playerScoreTimeEl.textContent = `เวลาของคุณ: ${playerTime.toFixed(2)} วินาที`;
            }
        }
        
        function resetGame() {
            location.reload();
        }
    </script>
</body>
</html>